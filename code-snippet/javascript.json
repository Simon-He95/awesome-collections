{
  // Place your 全局 snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
  // Placeholders with the same ids are connected.
  // Example:
  "function": {
    "prefix": "function 新建方法",
    "body": "function ${1:name}() {${2}}",
    "description": "方法"
  },
  "arrow": {
    "prefix": "arrowFunction 新建方法",
    "body": [
      "const fn = (${1}) => {",
      "  ${2}",
      "};"
    ],
    "description": "方法"
  },
  "import": {
    "prefix": "import 导入资源",
    "body": "import {$0} from '';",
    "description": "导入"
  },
  "require": {
    "prefix": "require",
    "body": "const {$1} = require('$2')",
    "description": "require 导入模板"
  },
  "log": {
    "prefix": "log 打印",
    "body": [
      "console.log('$1');",
      "$2"
    ],
    "description": "Log output to console"
  },
  "forEach": {
    "prefix": "forEach",
    "body": [
      "${1:array}.forEach((${2:i}) => {",
      "  ${3}",
      "}"
    ],
    "description": "forEach"
  },
  "map": {
    "prefix": "map",
    "body": [
      "${1:array}.map((${2:i}) => {",
      "  ${3}",
      "}"
    ],
    "description": "map"
  },
  "filter": {
    "prefix": "filter",
    "body": [
      "${1:array}.filter((${2:i}) => {",
      "  ${3}",
      "}"
    ],
    "description": "filter 过滤"
  },
  "useAttrs": {
    "prefix": "myuseAttrs",
    "body": [
      "const attrs = useAttrs()",
    ],
    "description": "useAttrs"
  },
  "defineProps": {
    "prefix": "mydefineProps",
    "body": [
      "const props = defineProps()",
    ],
    "description": "defineProps"
  },
  "ref": {
    "prefix": "myref",
    "body": [
      "const {$1} = ref(${2})",
    ],
    "description": "ref"
  },
  "reactive": {
    "prefix": "myreactive",
    "body": [
      "const {$1} = reactive(${2})",
    ],
    "description": "reactive"
  },
  "useToggle": {
    "prefix": "myuseToggle",
    "body": [
      "const toggle = useToggle(mode)",
    ],
    "description": "myuseToggle"
  },
  "useElementBounding": {
    "prefix": "myuseElementBounding",
    "body": [
      "const rect = useElementBounding(el)",
    ],
    "description": "useElementBounding"
  },
  "watch": {
    "prefix": "mywatch",
    "body": [
      "watch(${1:ref}, (value) => {",
      "${2}",
      "})",
    ],
    "description": "useElementBounding"
  },
  "computed": {
    "prefix": "mycomputed",
    "body": [
      "const result = computed(() => {",
      "${1}",
      "})",
    ],
    "description": "computed"
  },
  "useEventListener": {
    "prefix": "myuseEventListener",
    "body": "useEventListener('resize', update)",
    "description": "useEventListener"
  },
  "watchEffect": {
    "prefix": "mywatchEffect",
    "body": [
      "watchEffect(() => {",
      "${1}",
      "})",
    ],
    "description": "watchEffect"
  },
  "useStorage": {
    "prefix": "myuseStorage",
    "body": [
      "useStorage('${1:key}', ${2:defaultValue})",
    ],
    "description": "useStorage"
  },
}