{
  // Place your snippets for typescript here. Each snippet is defined under a snippet name and has a prefix, body and
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // Example:
  "function": {
    "prefix": "function",
    "body": ["function ${1:name}(${2:args}:string) {", "$2", "}"],
    "description": "function 函数"
  },
  "arrowFunction": {
    "prefix": "arrowFunction",
    "body": ["const ${1:name} = ($2) => {", "  $3", "}"],
    "description": "arrowFunction 函数"
  },
  "import": {
    "prefix": "import",
    "body": ["import ${1:name} from '${2:path}';"],
    "description": "import 导入"
  },
  "require": {
    "prefix": "require",
    "body": ["const ${1:name} = require('${2:path}');"],
    "description": "require 导入"
  },
  "type": {
    "prefix": "type",
    "body": ["type ${1:name} = {", "${2:_name}: string", "}"],
    "description": "type 类型"
  },
  "interface": {
    "prefix": "interface",
    "body": ["interface ${1:name}  {", "${2:_name}: string", "}"],
    "description": "interface 类型"
  },
  "useAttrs": {
    "prefix": "_useAttrs",
    "body": ["const attrs = useAttrs()"],
    "description": "useAttrs"
  },
  "defineProps": {
    "prefix": "_defineProps",
    "body": ["const props = defineProps<{name:any}>()"],
    "description": "defineProps"
  },
  "ref": {
    "prefix": "_ref",
    "body": ["const $1 = ref(${2})"],
    "description": "ref"
  },
  "reactive": {
    "prefix": "_reactive",
    "body": ["const $1 = reactive<${1:any}>(${2})"],
    "description": "reactive"
  },
  "useToggle": {
    "prefix": "_useToggle",
    "body": ["const toggle = useToggle(mode)"],
    "description": "_useToggle"
  },
  "useElementBounding": {
    "prefix": "_useElementBounding",
    "body": ["const rect = useElementBounding(el)"],
    "description": "useElementBounding"
  },
  "watch": {
    "prefix": "_watch",
    "body": ["watch(${1:ref}, (newV, oldV) => {", "  ${2}", "})"],
    "description": "useElementBounding"
  },
  "computed": {
    "prefix": "_computed",
    "body": ["const result = computed(() => {", "  ${1}", "})"],
    "description": "computed"
  },
  "useEventListener": {
    "prefix": "_useEventListener",
    "body": "useEventListener('resize', update)",
    "description": "useEventListener"
  },
  "watchEffect": {
    "prefix": "_watchEffect",
    "body": ["watchEffect(() => {", "  ${1}", "})"],
    "description": "watchEffect"
  },
  "useStorage": {
    "prefix": "_useStorage",
    "body": ["const $1 = useStorage('${2:key}', ${3:defaultValue})"],
    "description": "useStorage"
  },
  "log": {
    "prefix": "log 打印",
    "body": ["console.log('$1');", "$2"],
    "description": "Log output to console"
  },
  "forEach": {
    "prefix": "forEach",
    "body": ["${1:array}.forEach((${2:i}) => {", "  ${3}", "}"],
    "description": "forEach"
  },
  "map": {
    "prefix": "map",
    "body": ["${1:array}.map((${2:i}) => {", "  ${3}", "}"],
    "description": "map"
  },
  "filter": {
    "prefix": "filter",
    "body": ["${1:array}.filter((${2:item}) => {", "  ${3}", "}"],
    "description": "filter 过滤"
  },
  "forloop": {
    "prefix": "forloop",
    "body": ["for (let i = 0; i < ${1:content}; i++) {", " $2", "}"],
    "description": "for loop"
  },
  "forin": {
    "prefix": "forin",
    "body": [
      "for (const key in ${1:object}) {",
      "  const val = $1[key]",
      "  $2",
      "}"
    ],
    "description": "for in"
  },
  "forof": {
    "prefix": "forof",
    "body": ["for (const item of ${1:array}) {", "  $2", "}"],
    "description": "for of"
  },
  "forawait": {
    "prefix": "forawait",
    "body": ["for await (const item of ${1:array) {", "  $2", "}"],
    "description": "for await of"
  }
}
